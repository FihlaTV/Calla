import { CubeMapFace } from "../graphics2d/CubeMapFace";
import type { InterpolationType } from "../graphics2d/InterpolationType";
import { CanvasTypes, MemoryImageTypes } from "../html/canvas";
import type { progressCallback } from "../tasks/progressCallback";
import { getPartsReturnType } from "./getPartsReturnType";
import { IFetcher } from "./IFetcher";
export declare class Fetcher implements IFetcher {
    private _getCanvas;
    private _getImageData;
    private _getCubes;
    private _getEquiMaps;
    constructor();
    getCanvas(path: string, onProgress?: progressCallback): Promise<CanvasTypes>;
    getImageData(path: string, onProgress?: progressCallback): Promise<ImageData>;
    getCubes(path: string, onProgress?: progressCallback): Promise<MemoryImageTypes[]>;
    getEquiMaps(path: string, interpolation: InterpolationType, maxWidth: number, onProgress?: progressCallback): Promise<MemoryImageTypes[]>;
    private readRequestResponse;
    private getResponse;
    private postObjectForResponse;
    private readResponseBuffer;
    getBuffer(path: string, onProgress?: progressCallback): Promise<getPartsReturnType>;
    postObjectForBuffer<T>(path: string, obj: T, onProgress?: progressCallback): Promise<getPartsReturnType>;
    getBlob(path: string, onProgress?: progressCallback): Promise<Blob>;
    postObjectForBlob<T>(path: string, obj: T, onProgress?: progressCallback): Promise<Blob>;
    getFile(path: string, onProgress?: progressCallback): Promise<string>;
    postObjectForFile<T>(path: string, obj: T, onProgress?: progressCallback): Promise<string>;
    private readFileImage;
    getImageBitmap(path: string, onProgress?: progressCallback): Promise<ImageBitmap>;
    getImage(path: string, onProgress?: progressCallback): Promise<HTMLImageElement>;
    postObjectForImageBitmap<T>(path: string, obj: T, onProgress?: progressCallback): Promise<ImageBitmap>;
    postObjectForImage<T>(path: string, obj: T, onProgress?: progressCallback): Promise<HTMLImageElement>;
    private getCanvasViaImageBitmap;
    private getCanvasViaImage;
    private readImageData;
    private getImageDataViaImageBitmap;
    private getImageDataViaImage;
    getCubesViaImageBitmaps(path: string, onProgress?: progressCallback): Promise<ImageBitmap[]>;
    private getCubesViaImage;
    getEquiMapViaImageBitmaps(path: string, interpolation: InterpolationType, maxWidth: number, onProgress?: progressCallback): Promise<ImageBitmap[]>;
    private getEquiMapViaImage;
    private readBufferText;
    getText(path: string, onProgress?: progressCallback): Promise<string>;
    postObjectForText<T>(path: string, obj: T, onProgress?: progressCallback): Promise<string>;
    getObject<T>(path: string, onProgress?: progressCallback): Promise<T>;
    postObjectForObject<T, U>(path: string, obj: T, onProgress?: progressCallback): Promise<U>;
    postObject<T>(path: string, obj: T): Promise<void>;
    private readTextXml;
    getXml(path: string, onProgress?: progressCallback): Promise<HTMLElement>;
    postObjectForXml<T>(path: string, obj: T, onProgress?: progressCallback): Promise<HTMLElement>;
    loadScript(path: string, test: () => boolean, onProgress?: progressCallback): Promise<void>;
    renderImageBitmapFace(readData: ImageData, faceName: CubeMapFace, interpolation: InterpolationType, maxWidth: number, onProgress?: progressCallback): Promise<ImageBitmap>;
}
